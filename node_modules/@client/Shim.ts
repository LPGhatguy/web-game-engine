type UnlockCallback = (locked: boolean, canvas: HTMLCanvasElement) => void;

export default class Shim {
	static lockPointer(canvas: HTMLCanvasElement) {
		let locker = canvas.requestPointerLock ||
			canvas["mozRequestPointerLock"] ||
			canvas["webkitRequestPointerLock"];

		if (locker) {
			(<Function>locker).apply(canvas);
		} else {
			console.warn("Browser does not support *requestPointerLock.");
		}
	}

	static getLockedElement() {
		return document.pointerLockElement ||
			document["mozPointerLockElement"] ||
			document["webkitPointerLockElement"];
	}

	static onLockChange(canvas: HTMLCanvasElement, callback: UnlockCallback) {
		let method = () => {
			let el = this.getLockedElement();

			if (el === canvas) {
				callback(true, canvas);
			} else {
				callback(false, canvas);
			}
		};

		if ("onpointerlockchange" in document) {
			document.addEventListener("pointerlockchange", method, false);
		} else if ("onmozpointerlockchange" in document) {
			document.addEventListener("mozpointerlockchange", method, false);
		} else if ("onwebkitpointerlockchange" in document) {
			document.addEventListener("webkitpointerlockchange", method, false);
		} else {
			throw new Error("System was unable to hook into pointer lock change event!");
		}
	}
}