import Camera from "./Camera";
import Controller from "./Controller";
import {ActionType} from "./input/Action";
import InputManager from "./input/InputManager";
import Vector3 from "typed-math/Vector3";
import Quaternion from "typed-math/Quaternion";

export default class FPSCameraController {
	camera: Camera;
	speed: number = 0.1;
	rotationSpeed: number = Math.PI / 256;
	private offset = new Vector3();
	private pitch = new Quaternion();
	private yaw = new Quaternion();

	constructor(camera: Camera) {
		this.camera = camera;
	}

	update(dt: number) {
		let work = false;
		this.offset.set(0, 0, 0);

		if (InputManager.isActionDown(ActionType.Forward)) {
			this.offset.z += 1;
			work = true;
		} else if (InputManager.isActionDown(ActionType.Backward)) {
			this.offset.z -= 1;
			work = true;
		}

		if (InputManager.isActionDown(ActionType.Left)) {
			this.offset.x += 1;
			work = true;
		} else if (InputManager.isActionDown(ActionType.Right)) {
			this.offset.x -= 1;
			work = true;
		}

		if (work) {
			this.offset.normalize();
			this.camera.orientation.quaternion.transformVector(this.offset);
			this.offset.scale(this.speed);

			this.camera.position.addVector(this.offset);
			this.camera.dirty = true;
		}

		let mouseX = InputManager.mouseDelta[0];
		let mouseY = InputManager.mouseDelta[1];

		if (mouseX != 0 || mouseY != 0) {
			this.pitch.setFromEuler(0, 0, -mouseY * this.rotationSpeed);
			this.yaw.setFromEuler(-mouseX * this.rotationSpeed, 0, 0);

			this.yaw.multiplyVector(this.camera.orientation.quaternion, this.camera.orientation.quaternion);
			this.camera.orientation.quaternion.multiplyVector(this.pitch);

			this.camera.orientation.dirty = true;
			this.camera.dirty = true;
		}
	}
}