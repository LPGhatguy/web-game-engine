import Shim from "./Shim";
import Context from "./graphics/Context";
import Timer from "./Timer";
import Broadcaster from "@common/Broadcaster";
import SequentialBroadcaster from "@common/SequentialBroadcaster";
import InputManager from "./input/InputManager";
import ShaderProgram from "./graphics/ShaderProgram";

let coolStyle = `
background-color: black;
color: white;
font-size: 20pt;
line-height: 2;
border-radius: 8px;
padding: 4px 8px;
`;

export default class Engine {
	timer: Timer;
	context: Context;
	gl: WebGLRenderingContext;
	vao: OES_vertex_array_object;
	canvas: HTMLCanvasElement;

	onLoad = new SequentialBroadcaster();
	onUpdate = new Broadcaster();
	onDraw = new Broadcaster();

	currentProgram: ShaderProgram;

	private boundLoop: Function;

	constructor() {
		this.boundLoop = this.loop.bind(this);
	}

	useProgram(program: ShaderProgram) {
		if (program) {
			program.use();
		} else {
			this.gl.useProgram(null);
			this.currentProgram = undefined;
		}
	}

	logAwesome(msg: string) {
		return console.log(`%c${msg}`, coolStyle);
	}

	main() {
		if (document.readyState == "complete" ||
			document.readyState == "loaded" ||
			document.readyState == "interactive") {

			this.start();
		} else {
			document.addEventListener("DOMContentLoaded", () => {
				this.start();
			});
		}
	}

	start() {
		this.init();
		this.onLoad.fire([]).then(() => this.loop());
	}

	loop() {
		this.step();
		this.draw();

		InputManager.update();

		requestAnimationFrame(<FrameRequestCallback>this.boundLoop);
	}

	draw() {
		this.onDraw.fire([]);
	}

	step() {
		this.timer.step();

		if (this.timer.delta() > 0) {
			this.onUpdate.fire([this.timer.delta()]);
		}
	}

	resize(width: number, height: number) {
		this.canvas.width = width;
		this.canvas.height = height;

		this.gl.viewport(0, 0, width, height);
	}

	init() {
		this.initTimer();
		this.initCanvas();
		this.initContext();
		this.initInput();
	}

	initInput() {
		InputManager.hook();
	}

	initTimer() {
		this.timer = new Timer();
	}

	initCanvas(width: number = window.innerWidth, height: number = window.innerHeight) {
		let canvas = document.createElement("canvas");
		this.canvas = canvas;
		canvas.width = width;
		canvas.height = height;

		canvas.addEventListener("click", (e) => {
			Shim.lockPointer(canvas);
		});

		document.body.appendChild(canvas);
	}

	initContext() {
		this.context = new Context(this.canvas);
		this.gl = this.context.gl;

		this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);

		this.vao = this.gl.getExtension("OES_vertex_array_object");
		this.gl.getExtension("WEBGL_draw_buffers");
		this.gl.getExtension("OES_texture_float");
		this.gl.getExtension("OES_texture_float_linear");
		this.gl.getExtension("WEBGL_depth_texture");
	}
}