import Shader, {ShaderType} from "@client/graphics/Shader";

let shader = new Shader(ShaderType.Fragment, `
precision mediump float;

uniform sampler2D tex;

varying vec2 Texcoord;
varying vec3 Normal;
varying vec3 Position;

const vec3 lightPos = vec3(2.0);
const vec3 ambientColor = vec3(0.1);
const vec3 diffuseColor = vec3(0.35, 0.35, 0.35);
const vec3 specularColor = vec3(1.0);
const float shininess = 16.0;
const float gamma = 2.2;

void main(void) {
	vec3 normal = normalize(Normal);
	vec3 lightDir = normalize(lightPos - Position);

	float lambert = max(dot(lightDir, normal), 0.0);
	float specular = 0.0;

	if (lambert > 0.0) {
		vec3 viewDir = normalize(-Position);
		vec3 halfDir = normalize(lightDir + viewDir);

		float specAngle = max(dot(halfDir, normal), 0.0);
		specular = pow(specAngle, shininess);
	}

	vec3 colorLinear = ambientColor + lambert * diffuseColor + specular * specularColor;
	vec3 colorsRGB = pow(colorLinear, vec3(1.0/gamma));

	gl_FragColor = texture2D(tex, Texcoord) * vec4(colorsRGB, 1.0);
}
`);

export default shader;