import Shader, {ShaderType} from "@client/graphics/Shader";

let shader = new Shader(ShaderType.Fragment, `
precision highp float;

uniform sampler2D u_depth;
uniform sampler2D u_normal;
uniform sampler2D u_position;
uniform sampler2D u_color;

uniform vec4 u_light;
uniform vec3 u_lightColor;

varying vec2 fs_texcoord;

float linearizeDepth(float near, float far, float depth) {
	return (2.0 * near) / (far + near - depth * (far - near));
}

void main(void) {
	vec3 lightPosition = u_light.xyz;
	float lightRadius = u_light.w;

	vec3 normal = texture2D(u_normal, fs_texcoord).xyz;
	vec3 position = texture2D(u_position, fs_texcoord).xyz;
	vec3 color = texture2D(u_color, fs_texcoord).xyz;
	float depth = 2.0 * texture2D(u_depth, fs_texcoord).x - 1.0;

	float dist = distance(lightPosition, position);

	if (dist < lightRadius) {
		float att = dist / (1.0 - (dist / lightRadius) * (dist / lightRadius));
		att = att / lightRadius + 1.0;
		att = 1.0 / (att * att);

		float diffuse = dot(normal, normalize(lightPosition - position));

		gl_FragColor = vec4(att * diffuse * u_lightColor * color, 1.0);
	} else {
		gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
	}
}
`);

export default shader;