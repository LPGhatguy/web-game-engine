import Context from "@client/graphics/Context";
import Matrix4x4 from "typed-math/Matrix4x4";
import Vector3 from "typed-math/Vector3";
import PerspectiveCamera from "./PerspectiveCamera";
import FPSCameraController from "./FPSCameraController";
import Texture from "./graphics/Texture";
import Shim from "./Shim";
import Timer from "./Timer";
import InputManager from "./input/InputManager";

import BaseFrag from "./shaders/BaseFrag";
import BaseVert from "./shaders/BaseVert";

import Cube from "./graphics/Cube";

let coolStyle = `
background-color: black;
color: white;
font-size: 20pt;
line-height: 2;
border-radius: 8px;
padding: 4px 8px;
`;

let canvas = document.createElement("canvas");
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

canvas.addEventListener("click", (e) => {
	Shim.lockPointer(canvas);
});

let context = new Context(canvas);
let gl = context.gl;

let timer: Timer;

let vertices = new Float32Array(Cube);

let triBuffer;

let cam = new PerspectiveCamera(70, canvas.width / canvas.height, 0.1, 100);
let controller = new FPSCameraController(cam);

let tView;

let tm = new Matrix4x4();

function main() {
	console.log("%cHi! Welcome to Meanwhile in Sector 80!", coolStyle);
	console.log("%cThis is an early version of the client.", coolStyle);

	document.body.appendChild(canvas);

	InputManager.hook();
	timer = new Timer();

	gl.enable(gl.DEPTH_TEST);
	gl.enable(gl.CULL_FACE);

	gl.enable(gl.BLEND);

	gl.blendEquation(gl.FUNC_ADD);
	gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

	gl.clearColor(0.25, 0.25, 0.25, 1);
	gl.clear(gl.COLOR_BUFFER_BIT);
	gl.viewport(0, 0, canvas.width, canvas.height);

	triBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, triBuffer);
	gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

	let frag = BaseFrag.compile(gl);
	let vert = BaseVert.compile(gl);

	let program = gl.createProgram();
	gl.attachShader(program, frag);
	gl.attachShader(program, vert);
	gl.linkProgram(program);

	if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
		throw new Error("Couldn't initialize shaders!");
	}

	let posAttrib = gl.getAttribLocation(program, "position");
	gl.enableVertexAttribArray(posAttrib);
	gl.vertexAttribPointer(posAttrib, 3, gl.FLOAT, false, 8*4, 0);

	let colorAttrib = gl.getAttribLocation(program, "color");
	gl.enableVertexAttribArray(colorAttrib);
	gl.vertexAttribPointer(colorAttrib, 3, gl.FLOAT, false, 8 * 4, 3 * 4);

	let texcoordAttrib = gl.getAttribLocation(program, "texcoord");
	gl.enableVertexAttribArray(texcoordAttrib);
	gl.vertexAttribPointer(texcoordAttrib, 2, gl.FLOAT, false, 8 * 4, 6 * 4);

	Texture.load(gl, "/images/words.png")
		.then((texture) => {
			let texUniform = gl.getUniformLocation(program, "tex");
			gl.activeTexture(gl.TEXTURE0);
			gl.bindTexture(gl.TEXTURE_2D, texture.texture);
			gl.uniform1i(texUniform, 0);
		});

	let tModel = gl.getUniformLocation(program, "transformModel");
	tView = gl.getUniformLocation(program, "transformView");
	let tProjection = gl.getUniformLocation(program, "transformProjection");

	gl.useProgram(program);

	gl.uniformMatrix4fv(tModel, false, tm.array);
	gl.uniformMatrix4fv(tView, false, cam.getViewMatrix().array);
	gl.uniformMatrix4fv(tProjection, false, cam.getProjectionMatrix().array);

	requestAnimationFrame(loop);
}

function loop(t) {
	update();
	draw();

	InputManager.update();

	requestAnimationFrame(loop);
}

function update() {
	timer.frame();

	if (timer.delta() > 0) {
		controller.update(timer.delta());
	}
}

function draw() {
	gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

	gl.uniformMatrix4fv(tView, false, cam.getViewMatrix().array);

	gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 8);
}

if (document.readyState == "complete" ||
	document.readyState == "loaded" ||
	document.readyState == "interactive") {
	main();
} else {
	document.addEventListener("DOMContentLoaded", () => {
		main();
	});
}