import KeyMap, {InverseKeyMap} from "./KeyMap";
import ActionMap, {InverseActionMap} from "./ActionMap";
import {ActionType} from "./Action";
import Broadcaster from "@common/Broadcaster";

export default class InputManager {
	static down: Map<number, boolean> = new Map<number, boolean>();
	static mouseDelta = [0, 0];
	private static nextDelta = [0, 0];

	static onKeyDown = new Broadcaster();
	static onKeyUp = new Broadcaster();

	static update() {
		this.mouseDelta = this.nextDelta;
		this.nextDelta[0] = 0;
		this.nextDelta[1] = 0;
	}

	static hook() {
		document.addEventListener("keydown", (e) => {
			this.down.set(e.keyCode, true);
			this.onKeyDown.fire([KeyMap.get(e.keyCode)]);
		});

		document.addEventListener("keyup", (e) => {
			this.down.set(e.keyCode, false);
			this.onKeyUp.fire([KeyMap.get(e.keyCode)]);
		});

		document.addEventListener("mousemove", (e) => {
			let x = e.movementX || e["mozMovementX"] || 0;
			let y = e.movementY || e["mozMovementY"] || 0;

			this.nextDelta[0] += x;
			this.nextDelta[1] += y;
		});
	}

	static isDown(key: string) {
		return !!this.down.get(InverseKeyMap.get(key));
	}

	static isUp(key: string) {
		return !this.down.get(InverseKeyMap.get(key));
	}

	static isActionDown(action: ActionType) {
		let values = InverseActionMap.get(action);

		for (let key of values) {
			if (this.isDown(key)) {
				return true;
			}
		}

		return false;
	}

	static isActionUp(action: ActionType) {
		let values = InverseActionMap.get(action);

		for (let key of values) {
			if (this.isDown(key)) {
				return false;
			}
		}

		return true;
	}
}