export default class Context {
	canvas: HTMLCanvasElement;
	gl: WebGLRenderingContext;

	protected extensions = [];

	constructor(element: Element) {
		let canvas = <HTMLCanvasElement>element;

		let gl: WebGLRenderingContext;
		try {
			gl = <WebGLRenderingContext>canvas.getContext("webgl");
			gl["viewportWidth"] = canvas.width;
			gl["viewportHeight"] = canvas.height;
		} catch(e) {
			console.warn("Failure initializing WebGL context", e);
		}

		if (!gl) {
			throw new Error("Couldn't initialize WebGL!");
		}

		this.canvas = canvas;
		this.gl = gl;
	}

	loadExtensions(...exts: string[]) {
		let extensions = exts.map(this.gl.getExtension.bind(this.gl));
		this.extensions = extensions;

		if (extensions.indexOf(null) > -1) {
			extensions.forEach((value, key) => {
				if (!value) {
					let name = exts[key];
					console.warn(`Couldn't load WebGL extension ${name}!`);
				}
			});

			throw new Error("Failed to acquire some WebGL extensions.");
		}
	}
}