import Engine from "@client/Engine";
import Shader from "./Shader";

export default class ShaderProgram {
	program: WebGLProgram;
	attributes: { [name: string]: number } = {};
	uniforms: { [name: string]: WebGLUniformLocation } = {};

	protected engine: Engine;

	constructor(engine: Engine) {
		this.engine = engine;

		this.program = engine.gl.createProgram();
	}

	attach(...shaders: WebGLShader[]) {
		for (let shader of shaders) {
			this.engine.gl.attachShader(this.program, shader);
		}
	}

	addUniforms(...names: string[]) {
		for (let name of names) {
			this.uniforms[name] = this.engine.gl.getUniformLocation(this.program, name);
		}
	}

	addAttributes(...names: string[]) {
		for (let name of names) {
			this.attributes[name] = this.engine.gl.getAttribLocation(this.program, name);
		}
	}

	enableAttributes(...names: string[]) {
		let gl = this.engine.gl;

		// TODO: error check
		for (let name of names) {
			gl.enableVertexAttribArray(this.attributes[name]);
		}
	}

	disableAttributes(...names: string[]) {
		let gl = this.engine.gl;

		// TODO: error check
		for (let name of names) {
			gl.disableVertexAttribArray(this.attributes[name]);
		}
	}

	link() {
		this.engine.gl.linkProgram(this.program);

		if (!this.engine.gl.getProgramParameter(this.program, this.engine.gl.LINK_STATUS)) {
			throw new Error("Couldn't initialize shaders!");
		}
	}

	use() {
		this.engine.currentProgram = this;
		this.engine.gl.useProgram(this.program);
	}
}