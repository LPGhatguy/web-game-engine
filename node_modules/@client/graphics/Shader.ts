enum ShaderType {
	Vertex,
	Fragment
}

export { ShaderType };

let typeMap = new Map<ShaderType, number>();

typeMap.set(ShaderType.Fragment, WebGLRenderingContext.FRAGMENT_SHADER);
typeMap.set(ShaderType.Vertex, WebGLRenderingContext.VERTEX_SHADER);

export default class Shader {
	type: ShaderType;
	source: string;

	constructor(type: ShaderType, source: string) {
		this.type = type;
		this.source = source;
	}

	compile(gl: WebGLRenderingContext): WebGLShader {
		let shader = gl.createShader(typeMap.get(this.type));
		gl.shaderSource(shader, this.source);
		gl.compileShader(shader);

		if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
			throw new Error("Shader failed to compile: " + gl.getShaderInfoLog(shader));
		}

		return shader;
	}
}