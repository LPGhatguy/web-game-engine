type NativeBuffer = Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array;
type NativeBufferType =
	typeof Uint8Array | typeof Int8Array |
	typeof Uint16Array | typeof Int16Array |
	typeof Uint32Array | typeof Int32Array |
	typeof Float32Array | typeof Float64Array;

export default class DynamicBuffer {
	static sizeMantissa = 2;
	static sizeExponentDelta = 1;

	internal: NativeBuffer;

	private type: NativeBufferType;

	constructor(type: NativeBufferType, length: number) {
		if (length >= 0) {
			this.internal = new type(length);
		}
	}

	static fromBuffer(buffer: NativeBuffer) {
		let self = new DynamicBuffer(<NativeBufferType>buffer.constructor, -1);
		self.internal = buffer;
		self.type = <NativeBufferType>buffer.constructor;

		return self;
	}

	resize(length: number) {
		let old = this.internal;
		let internal = new this.type(length);

		if (length > this.internal.length) {
			internal.set(old);
		} else {
			let len = Math.min(old.length, internal.length);
			let slice = old.subarray(0, len - 1);

			internal.set(slice);
		}

		this.internal = internal;
	}

	getNextSize() {
		let thisClass = <typeof DynamicBuffer>this.constructor;
		let mantissa = thisClass.sizeMantissa;
		let dexp = thisClass.sizeExponentDelta;

		let len = this.internal.length;
		let exp = Math.floor(Math.log(len) / Math.log(mantissa));

		return Math.pow(mantissa, exp + dexp);
	}
}