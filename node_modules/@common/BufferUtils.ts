export type NativeArray = Uint8Array | Uint16Array | Uint32Array;
export type NativeArrayType = typeof Uint8Array | typeof Uint16Array | typeof Uint32Array;

export function getNativeType(size: number): NativeArrayType {
	if (size === 1) {
		return Uint8Array;
	} else if (size === 2) {
		return Uint16Array;
	} else if (size === 4) {
		return Uint32Array;
	}

	throw new Error(`Invalid byte depth ${size}!`);
}

export function viewNative(size: number, view: DataView, offset: number = 0): number {
	if (size === 1) {
		return view.getUint8(offset);
	} else if (size === 2) {
		return view.getUint16(offset, true);
	} else if (size === 4) {
		return view.getUint32(offset, true);
	}

	throw new Error(`Invalid byte depth ${size}!`);
}

export function setNative(size: number, view: DataView, offset: number, value: number): void {
	if (size === 1) {
		view.setUint8(offset, value);
		return;
	} else if (size === 2) {
		view.setUint16(offset, value, true);
		return;
	} else if (size === 4) {
		view.setUint32(offset, value, true);
		return;
	}

	throw new Error(`Invalid byte depth ${size}!`);
}