export default class DynamicF32 {
	internal: Float32Array;

	private pointer: number = 0;

	constructor(length: number) {
		if (length >= 0) {
			this.internal = new Float32Array(length);
		}
	}

	static fromBuffer(buffer: Float32Array, offset: number = 0) {
		let self = new DynamicF32(-1);
		self.internal = buffer;
		self.pointer = offset;

		return self;
	}

	resize(length: number) {
		let old = this.internal;
		let internal = new Float32Array(length);
		let len = Math.min(old.length, internal.length);

		for (let i = 0; i < len; i++) {
			internal[i] = old[i];
		}

		this.internal = internal;
	}

	shrink() {
		this.resize(this.pointer);
	}

	getNextSize() {
		let len = this.internal.length;
		let exp = Math.floor(Math.log(len) / Math.log(2));

		return Math.pow(2, exp + 1);
	}

	set(index: number, value: number) {
		this.internal.set(index, value);
	}

	push(value: number) {
		let next = this.pointer++;

		if (next > this.internal.length - 1) {
			this.resize(this.getNextSize());
		}

		this.internal[next] = value;
	}

	concat(array: number[]) {
		for (let v of array) {
			this.push(v);
		}
	}

	setPointer(index: number) {
		this.pointer = index;
	}
}